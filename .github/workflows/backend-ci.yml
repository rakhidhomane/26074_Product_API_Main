name: Backend CI/CD - Build and Push Docker Image

on:
  push:
    branches:
      - main
      - dev
      - 'feature/*'
      - 'release/*'
  pull_request:
    branches:
      - main
      - dev
  workflow_dispatch:

jobs:
  backend-build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # Checkout code
      - name: Checkout source code
        uses: actions/checkout@v3

      # Set up Java
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # Build backend
      - name: Build backend with Maven
        run: mvn clean package -DskipTests=false

      # Run unit tests
      - name: Run unit tests
        run: mvn test

      # SonarCloud Scan
      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v5
        
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.projectKey=almcybage_26074-product-api-main
            -Dsonar.projectName=almcybage_26074-product-api-main
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}

      # Check SonarCloud Quality Gate
      - name: Check SonarCloud Quality Gate
        #continue-on-error: true 
        run: |
          echo "Checking SonarCloud Quality Gate status..."
          sleep 30
          response=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
            "${{ secrets.SONAR_HOST_URL }}/api/qualitygates/project_status?projectKey=almcybage_26074-product-api-main")
          status=$(echo $response | jq -r '.projectStatus.status')
          if [ "$status" = "OK" ]; then
            echo "Quality Gate status: SUCCESS ✅"
          else
            echo "Quality Gate status: FAILED ❌"
            exit 1
          fi

      # Docker login
      - name: Docker login
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      # Set Docker image tag (build number)
      - name: Set Docker Image Tag
        run: echo "IMAGE_TAG=${{ github.run_number }}" >> $GITHUB_ENV

      # Build Docker image with build number tag
      - name: Build backend Docker image
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/product-app-backend:${IMAGE_TAG} .

      # Scan backend image with Trivy
      - name: Scan backend image with Trivy
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/product-app-backend:${{ env.IMAGE_TAG }}
          format: json
          output: trivy-report.json
          exit-code: 1
          severity: CRITICAL,HIGH

      # Upload Trivy scan report
      - name: Upload Trivy scan report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-backend-report
          path: trivy-report.json

      # Push backend image with build number tag
      - name: Push backend Docker image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/product-app-backend:${IMAGE_TAG}
